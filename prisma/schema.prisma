generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  TRADER_SELLER
  PRIVATE_SELLER
}

enum PriceCurrency {
  EURO
  POUND
}

enum AdType {
  SELLER
  WANTED
}

enum AdStatus {
  NEW
  USED
  ACTIVE
  EXPIRED
  PENDING
  REJECTED
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

enum ItemCondition {
  NEW
  OLD
}

enum MileageParameter {
  KM
  MILES
}

enum InteractionType {
  LIKE
  VIEW
  SHARE
}

enum NotificationType {
  STORY_VIEW
  STORY_LIKE
  NEW_FOLLOWER
  COMMENT
  SYSTEM_ALERT
  CUSTOM
}

model User {
  id               String          @id @default(uuid())
  name             String
  email            String          @unique
  password         String
  role             Role
  businessName     String?
  address          String
  vatNumber        String?
  dealerLicense    String?
  profileImage     String?
  backgroundImage  String?
  phoneNumber      String
  status           UserStatus      @default(ACTIVE)
  ads              Ads[]
  followers        Follower[]      @relation("followers")
  following        Follower[]      @relation("following")
  story            Story[]
  storyView        StoryView[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  is_emailVerified Boolean         @default(false)
  AdInteraction    AdInteraction[]
  notifications    Notification[]
}

model VerifyUser {
  id                String   @id @default(uuid())
  username          String   @unique
  otp               String
  usernameType      String
  type              Role
  verificationTries Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  is_Active  Boolean @default(true)
  is_Deleted Boolean @default(false)

  @@map(name: "verifyUser")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique()
  ads       Ads[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ads {
  id                   String        @id @default(uuid())
  categoryId           String
  category             Category      @relation(fields: [categoryId], references: [id])
  userId               String
  user                 User          @relation(fields: [userId], references: [id])
  uploadImagesForAd    String[]
  uploadImagesForStory String[]
  vehicleLicenseNumber String?
  itemName             String
  status               AdStatus
  adType               AdType
  phoneNumber          String
  location             String
  price                Float
  condition            ItemCondition
  priceCurrency        PriceCurrency

  mileageParameter MileageParameter?
  mileage          Float?
  motStatus        String?
  commercialsMake  String?
  commercialModel  String?
  yearOfProduction Int?
  loadCapacity     Float?
  engineSize       Int?

  descriptions  String?
  createDate    DateTime?       @default(now())
  story         Story[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  AdInteraction AdInteraction[]
}

model Follower {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  follower    User     @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

model AdInteraction {
  id        String          @id @default(uuid())
  adId      String
  userId    String?
  ad        Ads             @relation(fields: [adId], references: [id])
  user      User?           @relation(fields: [userId], references: [id])
  type      InteractionType
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Story {
  id                   String      @id @default(uuid())
  uploadImagesForStory String[]
  createdAt            DateTime    @default(now())
  adId                 String?
  ad                   Ads?        @relation(fields: [adId], references: [id])
  userId               String
  user                 User        @relation(fields: [userId], references: [id])
  views                StoryView[]
}

model StoryView {
  id        String   @id @default(uuid())
  userId    String
  storyId   String
  user      User     @relation(fields: [userId], references: [id])
  story     Story    @relation(fields: [storyId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, storyId]) // Ensure one user can only view a story once
}

model Notification {
  id          String           @id @default(uuid())
  userId      String?
  user        User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        NotificationType
  content     String
  link        String?
  isRead      Boolean          @default(false)
  isBroadcast Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}
